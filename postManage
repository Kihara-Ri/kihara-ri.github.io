#!/usr/bin/python3

"""
这是一个用来管理posts的脚本，你将用它来:
1. 每次运行，更新 ./docs/blog/posts/ 目录下的 Markdown 文本数量和总文字数，输出到 blog 的 index.md 中的特定一行
2. 检查新增、修改的文本，附加时间等信息并保存在log文件中供快速查询
3. 快速返回最近新增、修改过的文本目录，以供快速访问
"""

import os
import time
import datetime
from pathlib import Path

# 设置目录和文件路径
posts_dir = Path("./docs/blog/posts")
index_file = Path("./docs/blog/index.md")
log_file = Path("./posts_log.txt")

# 输出目标目录下所有的 .md 文件
def find_md(dir):
    md_path = []
    for root, dirs, files in os.walk(dir):
        for file in files:
            if file.endswith('.md'):
                md_path.append("./" + os.path.join(root, file))
    return md_path

# 输出 .md 文件的字数
def count_words(file_path):
    try:
        with open(file_path, encoding = 'utf-8') as file:
            contents = file.read()
    except FileNotFoundError:
        msg = '文件' + file_path + '不存在'
        print(msg)
    else:
        words = contents.rstrip()
        num_words = len(words)
        return(num_words)

# 输出目录下所有 .md 文件的字数
def all_words():
    md_path = find_md(posts_dir)
    all_words = 0
    for post in md_path:
        all_words += count_words(post)
    return all_words


def main():
    md_path = find_md(posts_dir)
    # print(f"你正在寻找的目录是: {posts_dir}")
    print(f"Posts总数: {len(md_path)}")
    # for i in range(len(md_path)):
    #     print(f"[{i+1}] ", md_path[i])
    print("所有的字数总和为:", all_words())
    
    
if __name__ == "__main__":
    main()
